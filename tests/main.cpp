#include <gtest/gtest.h>
#include <fstream>
#include <filesystem>
#include <chrono>
#include <thread>
#include "../src/modbus.hpp"
#include "../src/registerReader.hpp"
#include "../src/registers.hpp"
#include "../src/mqtt.hpp"
#include "../src/hass.hpp"
#include "../src/utils.hpp"

class MockModbusReader : public ModbusInterface {
public:
    std::vector<uint16_t> registers_;
    std::vector<uint16_t> holdRegisters_;
    MockModbusReader(const std::vector<uint16_t> registers, const std::vector<uint16_t> holdRegisters) {
        registers_ = registers;
        holdRegisters_ = holdRegisters;
    }

    bool isValid() const { return true; }
    std::vector<uint16_t> readRegisters(RegisterType type, int start_address, int num_registers) const {
        auto& rg = (type == RegisterType::INPUT) ? registers_ : holdRegisters_;
        std::vector<uint16_t> result;
        for (int i=0; i<num_registers; ++i) {
            result.push_back(rg[start_address + i]);
        }
        return result;
    }

    void writeRegisters(int start_address, const std::vector<uint16_t>& values) const {
        throw std::runtime_error("Not implemented");
    }
    
};

class MockMqtt: public MqttInterface {
public:
    void post(const std::string& topic, const std::string& value, bool retain = false) {
    }
};

class ModbusReaderTest : public ::testing::Test {
protected:
    void SetUp() override {

    }
};

TEST_F(ModbusReaderTest, DeconstructRegisters)
{
    MockModbusReader mmr({
        0x0000,0x098A,0x0980,0x097A,0x04C0,0x04C8,0x04C0,0x04C5,0x04BD,0x04BA,
        0x007D,0x003A,0x0004,0x000B,0x0005,0x0004,0x00C0,0x003D,0x0010,0x000E,
        0x0003,0x0002,0x0007,0x0002,0x0006,0x0001,0x055D,0xFE8C,0x0000,0x0000,
        0x0000,0x0000,0x08A8,0x0219,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x00DD,0x0000,0x0000,0x0000,0x00CD,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x15B1,0x0001,0x0000,0x0000,0x00A4,0x0000,0x0000,0x0000,
        0xF359,0x0000,0x0000,0x0000,0x000D,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0000,0x1776,0x1772,
        0x1781,0x0000,0x0000,0x0000,0x176C,0x1640,0x0014,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x021C,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0181,0x0230,
        0x0005,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0190,
        0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0x00A0,0x0000,0x0040,
        0x0064,0x09F0,0x0A50,0x000A,0x0014,0x0960,0x012C,0x0000,0x002C,0x0000,
        0x0032,0x0064,0x0064,0x0014,0x0190,0x0230,0x001E,0x004B,0x0096,0x0000,
        0x0000,0x0230,0x0190,0x0000,0x00C8,0x0000,0x0000,0x0032,0x0208,0x0000,
        0x0000,0x0000,0x0000,0x021C,0x01E0,0x005A,0x003C,0x0005,0x0032,0x0208,
        0x0032,0x005A,0x01F4,0x021C,0x0001,0x0000,0x001E,0x0078,0x0014,0x0000,
        0x3C5A,0x3C5A,0x3C5A,0x3C58,0x021C,0x01E0,0x021C,0x01E0,0x021C,0x01E0,
    }, {0x00C0,0x4009,0x3235,0x3235,0x3532,0x3335,0x3535,0x4149,0x4241,0x1100,
        0x0100,0x0001,0x0319,0x160C,0x0D0B,0x0001,0x0001,0x0000,0x0000,0x0032,
        0x0000,0x7A55,0x0578,0x012C,0x012C,0x0898,0x09D8,0x173E,0x177A,0x0840,
        0x0A50,0x0834,0x0514,0x04B0,0x0B40,0x00C8,0x0010,0x04B0,0x0B40,0x00C8,
        0x0010,0x0A50,0x16DA,0x17E8,0x7530,0x7530,0x1612,0x1838,0x0010,0x0010,
        0x1612,0x1838,0x0010,0x0010,0x002C,0x0930,0x08A0,0x0990,0x0A20,0x0000,
        0x0064,0x0064,0x03E8,0x03E8,0x0064,0x0064,0x0078,0x0064,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000,0x0078,0x003C,0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0078,0x0014,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
        0x00F0,0x003C,0x0000,0x0000,0x0000,0x0000,0x0005,0x0000,0x0000,0x0226,
        0x0190,0x00FA,0x00FA,0x0000,0x0000,0x000A,0xFF38,0x0226,0x0000,0x0190,
        0x0420,0x0000,0x0001,0x0001,0x0000,0x1774,0x0064,0xFFCE,0x0190,0x0000,
        });
    RegisterReader rri(mmr, RegisterType::INPUT);
    RegisterReader rrh(mmr, RegisterType::HOLDING);
    RegistersGridBoss rgb(rri, rrh);

    ASSERT_EQ(rgb.getSerial(), "5252255355");
    ASSERT_DOUBLE_EQ(rgb.geteToGridTotalL1(), 16.4);
    ASSERT_DOUBLE_EQ(rgb.geteUpsTotalL1(), 7108.9);
    ASSERT_DOUBLE_EQ(rgb.geteUpsTodayL1(), 22.1);
    ASSERT_DOUBLE_EQ(rgb.geteToUserToday(), 20.5);
    ASSERT_DOUBLE_EQ(rgb.geteUpsTotalL1(), 7108.9);
    ASSERT_DOUBLE_EQ(rgb.geteToGridTotalL1(), 16.4);
    ASSERT_DOUBLE_EQ(rgb.geteToUserTotalL1(), 6229.7);
    ASSERT_DOUBLE_EQ(rgb.geteGenTotalL1(), 1.3);
    ASSERT_DOUBLE_EQ(rgb.getphaseLockFreq(), 60.06);
    ASSERT_DOUBLE_EQ(rgb.getgridFreq(), 60.02);
    ASSERT_DOUBLE_EQ(rgb.getgenFreq(), 60.17);

    // for (int i=1; i<60; ++i) {
    //     std::cerr << i << ": " << rri.getRegister(i) << std::endl;
    // }

    // setenv("DEVICE_MODEL", "MockModel", 1);
    // HassDevice hd(rgb);
    // MockMqtt mqtt;
    // HassGridBoss gb(rgb, mqtt, hd);
    // std::cerr << gb.toJson() << std::endl;

}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}